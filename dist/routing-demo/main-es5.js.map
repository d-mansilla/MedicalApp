{"version":3,"sources":["webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/forgetpassword/forgetpassword.component.ts","webpack:///src/app/forgetpassword/forgetpassword.component.html","webpack:///src/app/services/CourseService.ts","webpack:///src/app/details/details.component.ts","webpack:///src/app/details/details.component.html","webpack:///src/environments/environment.ts","webpack:///src/app/model/signinData.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/profile/profile.component.ts","webpack:///src/app/profile/profile.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/services/user.service.client.ts","webpack:///src/app/services/authentication/authentication.service.ts","webpack:///src/app/security/authguard-service.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/main/main.component.ts","webpack:///src/app/main/main.component.html","webpack:///src/app/security/authentication.guard.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["RegisterComponent","router","isFormInvalid","errorActive","signInForm","valid","navigate","onSubmit","selector","templateUrl","styleUrls","ForgetpasswordComponent","CourseService","findAllPatients","fetch","then","response","json","DetailsComponent","environment","production","SigninData","username","password","AppComponent","authenticationService","title","logout","ProfileComponent","activatedRoute","userService","params","subscribe","userId","user","findUserById","userName","_id","AppModule","declarations","imports","providers","bootstrap","UserService","users","i","length","AuthenticationService","mocKedUser","isAuthenticated","signinData","checkCredentials","checkUsername","getUsername","checkPassword","getPassword","providedIn","AuthguardServiceService","routes","path","component","canActivate","redirectTo","routing","forRoot","AppRoutingModule","exports","LoginComponent","areCredentialsInvalid","value","authenticate","MainComponent","courseService","selectedPatient","modules","patients","patient","AuthenticationGuard","route","state","bootstrapModule","err","console","error","webpackEmptyAsyncContext","req","Promise","resolve","e","Error","code","keys","module","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {Router} from '@angular/router';\nimport {UserService} from '../services/user.service.client';\nimport {FormControl, FormGroup, NgForm} from '@angular/forms';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  isFormInvalid = false;\n  errorActive = ' ';\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit(signInForm: NgForm){\n    if (!signInForm.valid){\n      this.isFormInvalid = true;\n      this.errorActive = 'active';\n      return;\n    }\n    this.router.navigate(['/login']);\n  }\n\n}\n","<div class=\"login-wrapper\">\n\n  <form class=\"login\"(ngSubmit)=\"onSubmit(signInForm)\" #signInForm =\"ngForm\">\n\n    <section class=\"title\">\n      <h3 class=\"welcome\">Welcome to</h3>\n      <clr-icon size=\"26\" shape=\"dna\"></clr-icon>\n      Medical Info\n    </section>\n    <div class=\"login-group\">\n\n      <clr-input-container>\n        <label class=\"clr-sr-only\">Full Name</label>\n        <input type=\"text\" name=\"fname\" clrInput placeholder=\"Full Name\" required ngModel/>\n      </clr-input-container>\n\n      <clr-input-container>\n        <label class=\"clr-sr-only\">Username</label>\n        <input type=\"text\" name=\"username\" clrInput placeholder=\"Username\" required ngModel/>\n      </clr-input-container>\n\n      <clr-password-container>\n        <label class=\"clr-sr-only\">Password</label>\n        <input type=\"password\" name=\"password\" clrPassword placeholder=\"Password\" required ngModel/>\n      </clr-password-container>\n\n      <clr-password-container>\n        <label class=\"clr-sr-only\">Confirm Password</label>\n        <input type=\"password\" name=\"conpassword\" clrPassword placeholder=\"Confirm Password\" required ngModel/>\n      </clr-password-container>\n\n      <clr-input-container>\n        <label class=\"clr-sr-only\">Email</label>\n        <input type=\"email\" name=\"email\" clrInput placeholder=\"Email\" required ngModel/>\n      </clr-input-container>\n\n      <div class=\"error {{errorActive}} \" *ngIf=\"isFormInvalid\">\n        Please fill in the requirements\n      </div>\n\n      <button class=\"btn btn-primary\" type = \"submit\">Create</button>\n<!--      <a href=\"javascript:void(0);\" routerLink = \"/login\" clrDropdownItem>Logout</a>-->\n\n      <a href=\"javascript://\" class=\"signup\" routerLink =\"/login\">Already have account? Back to login</a>\n\n      <a href=\"javascript://\" class=\"signup\" routerLink =\"/forgotpassword\">Forgot Password? Click Here</a>\n\n    </div>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {Router} from '@angular/router';\nimport {NgForm} from '@angular/forms';\n\n@Component({\n  selector: 'app-forgetpassword',\n  templateUrl: './forgetpassword.component.html',\n  styleUrls: ['./forgetpassword.component.css']\n})\nexport class ForgetpasswordComponent implements OnInit {\n\n  isFormInvalid = false;\n  errorActive = ' ';\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit(signInForm: NgForm){\n    if (!signInForm.valid){\n      this.isFormInvalid = true;\n      this.errorActive = 'active';\n      return;\n    }\n    this.router.navigate(['/login']);\n  }\n\n}\n","<div class=\"login-wrapper\">\n\n    <form class=\"login\" (ngSubmit)=\"onSubmit(signInForm)\" #signInForm =\"ngForm\">\n\n        <section class=\"title\">\n            <h3 class=\"welcome\">Welcome to</h3>\n            <clr-icon size=\"26\" shape=\"dna\"></clr-icon>\n            Medical Info\n        </section>\n        <div class=\"login-group\">\n\n            <clr-input-container>\n                <label class=\"clr-sr-only\">Email</label>\n                <input type=\"email\" name=\"email\" clrInput placeholder=\"Email\" required ngModel/>\n            </clr-input-container>\n\n            <div class=\"error {{errorActive}} \" *ngIf=\"isFormInvalid\">\n                Please fill in the requirements\n            </div>\n\n            <button class=\"btn btn-primary\" type=\"submit\">Reset</button>\n            <!--      <a href=\"javascript:void(0);\" routerLink = \"/login\" clrDropdownItem>Logout</a>-->\n\n            <a href=\"javascript://\" class=\"signup\" routerLink =\"/login\">Back to Login</a>\n\n            <a href=\"javascript://\" class=\"signup\" routerLink =\"/register\">No Account, No problem Click Here</a>\n\n        </div>\n    </form>\n</div>\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CourseService {\n  // findAllPatients = () => fetch('http://localhost:8080/api/patients').then(response => response.json());\n  // tslint:disable-next-line:max-line-length\n  findAllPatients = () => fetch('http://patientbackend-env.eba-epmwqesg.us-east-2.elasticbeanstalk.com/api/patients').then(response => response.json());\n\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-details',\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.component.css']\n})\nexport class DetailsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>details works!</p>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","export class SigninData {\n private username: string;\n private password: string;\n\n constructor(username: string, password: string) {\n     this.username = username;\n     this.password = password;\n\n }\n\n getUsername(): string{\n     return this.username;\n }\n\n getPassword(): string{\n     return this.password;\n }\n}\n","import { Component } from '@angular/core';\nimport {AuthenticationService} from './services/authentication/authentication.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'routing-demo';\n\n  constructor(public authenticationService: AuthenticationService) {\n  }\n\n  logout(){\n    this.authenticationService.logout();\n  }\n}\n","\n<router-outlet></router-outlet>\n\n\n\n\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { Router } from '@angular/router';\nimport { UserService } from '../services/user.service.client';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  // constructor(private activatedRoute: ActivatedRoute) { }\n\n  // ngOnInit(): void {\n  //   this.activatedRoute\n  //   .params\n  //   .subscribe(params =>\n  //   this.userId = params['userId']);\n\n  constructor(private activatedRoute: ActivatedRoute, private userService: UserService, private router: Router) { }\n  userId: Number;\n  userName: String;\n  password: String;\n  userObject: Object;\n\n\n    ngOnInit(): void {\n    this.activatedRoute\n    .params\n    .subscribe(params =>\n    this.userId = params['userId']);\n\n    const user = this.userService.findUserById(this.userId);\n    this.userName = user.username;\n    this.userId = user._id;\n    this.password = user.password;\n\n\n\n\n\n  }\n\n\n\n\n\n\n\n\n\n\n}\n\n\n\n\n","<!-- <h1>Profile for Student {{userId}}</h1> -->\n<h1>Profile for {{userName}}</h1>\n\n<div style=\"margin: 5%\">\n\n    <div class=\"col\">\n      <ul class=\"list-group\">\n        <li>\n          name: {{userName}}\n\n        </li>\n      </ul>\n    </div>\n    <div class=\"col\">\n      <ul class=\"list-group\">\n        <li>\n          password: {{password}}\n\n        </li>\n      </ul>\n    </div>\n    <div class=\"col\">\n      <ul class=\"list-group\">\n        <li>\n          ID: {{userId}}\n\n        </li>\n      </ul>\n    </div>\n  </div>\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { RegisterComponent } from './register/register.component';\nimport { routing } from './app-routing.module';\nimport { FormsModule } from '@angular/forms';\nimport { UserService } from './services/user.service.client';\nimport { CourseService } from './services/CourseService';\n\nimport { ClarityModule } from '@clr/angular';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MainComponent } from './main/main.component';\nimport {AuthguardServiceService} from \"./security/authguard-service.service\";\nimport { DetailsComponent } from './details/details.component';\nimport { ForgetpasswordComponent } from './forgetpassword/forgetpassword.component';\n\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    ProfileComponent,\n    RegisterComponent,\n    MainComponent,\n    DetailsComponent,\n    ForgetpasswordComponent\n  ],\n  imports: [\n    routing,\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule,\n    ClarityModule,\n    BrowserAnimationsModule\n  ],\n  providers: [\n  UserService,\n  CourseService,\n    AuthguardServiceService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\n\n@Injectable()\n\nexport class UserService {\nusers = [\n  { _id: 123, username:'bob', password: 'bobpassword'},\n  { _id: 456, username:'mike', password: 'mikepassword'}\n  ];\n  \n  findUserByCredentials(username: String, password: String){\n  for (let i = 0; i < this.users.length; i++) {\n  const  user = this.users[i];\n  if(username == user.username && password == user.password)\n  {\n  return user;\n  }\n\n  }\n  return null;\n  }\n\n  findUserById(_id: Number){\n    for (let i = 0; i < this.users.length; i++) {\n    const  user = this.users[i];\n    if(_id == user._id)\n    {\n    return user;\n    }\n  \n    }\n    return null;\n    }\n\n\n\n\n\n\n}\n","import { Injectable } from '@angular/core';\nimport {SigninData} from '../../model/signinData';\nimport {Router} from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n  private readonly mocKedUser = new SigninData('panit', 'panitpassword');\n  isAuthenticated = false;\n\n  constructor(private router: Router) { }\n\n  authenticate(signinData: SigninData): boolean{\n  if (this.checkCredentials(signinData)){\n    this.isAuthenticated = true;\n    this.router.navigate(['/main']);\n    return true;\n  }\n  this.isAuthenticated = false;\n  return false;\n  }\n  private checkCredentials(signinData: SigninData): boolean{\n    return this.checkUsername(signinData.getUsername()) && this.checkPassword(signinData.getPassword());\n  }\n\n  private checkUsername(username: string): boolean{\n    return username === this.mocKedUser.getUsername();\n  }\n  private checkPassword(password: string): boolean{\n    return password === this.mocKedUser.getPassword();\n  }\n\n  logout(){\n    this.isAuthenticated = false;\n    this.router.navigate([' ']);\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthguardServiceService {\n\n  constructor() { }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport {MainComponent} from \"./main/main.component\";\nimport {AuthguardServiceService} from \"./security/authguard-service.service\";\nimport {AuthenticationGuard} from \"./security/authentication.guard\";\nimport {ForgetpasswordComponent} from './forgetpassword/forgetpassword.component';\n\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent},\n  { path: 'register', component: RegisterComponent},\n  { path: 'main', component: MainComponent, canActivate: [AuthenticationGuard]},\n  { path: 'profile/:userId', component: ProfileComponent},\n  { path: ' ', component: LoginComponent},\n  { path: 'forgotpassword', component: ForgetpasswordComponent},\n  { path: '**', redirectTo: ' '}\n];\n\nexport const routing = RouterModule.forRoot(routes);\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UserService } from '../services/user.service.client';\nimport {NgForm} from '@angular/forms';\nimport {AuthenticationService} from '../services/authentication/authentication.service';\nimport {SigninData} from '../model/signinData';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  //class variables\n  // username: string;\n  // password: string;\n  errorActive = ' ';\n  isFormInvalid = false;\n  areCredentialsInvalid = false;\n\n  constructor(private authenticationService: AuthenticationService) { }\n\n  ngOnInit(): void {\n  }\n\n  // tslint:disable-next-line:typedef\n  onSubmit(signInForm: NgForm){\n  if (!signInForm.valid){\n    this.isFormInvalid = true;\n    this.areCredentialsInvalid = false;\n    this.errorActive = 'active';\n    return;\n  }\n  this.checkCredentials(signInForm);\n  // console.log(signInForm.value);\n  }\n  // tslint:disable-next-line:typedef\n  private checkCredentials(signInForm: NgForm){\n    const signinData = new SigninData(signInForm.value.username, signInForm.value.password);\n    if (!this.authenticationService.authenticate(signinData)){\n      this.isFormInvalid = false;\n      this.areCredentialsInvalid = true;\n      this.errorActive = 'active';\n    }\n  }\n  // login(username, password) {\n  //   console.log(username, password);\n  //   const user = this.userService.findUserByCredentials(username, password);\n  //   if(user != null)\n  //   {\n  //     this.router.navigate( ['main', user._id]);\n  //   }\n  //   else\n  //   {\n  //     this.errorMessage='Username or Password Incorrect';\n  //     this.errorActive='active';\n  //   }\n  // }\n\n\n}\n\n\n\n\n","<!--<h1>Login</h1>-->\n\n<!--Username-->\n<!--<input [(ngModel)]=\"username\"> {{username}}-->\n<!--<br/>-->\n<!--Password-->\n<!--<input [(ngModel)]=\"password\"> {{password}}-->\n<!--<br/>-->\n<!--<button (click)=\"login(username, password)\">Login</button>-->\n\n\n\n<!--<a routerLink = \"/register\">-->\n<!--  Register</a>-->\n\n<!--<a routerLink = \"/profile\">-->\n<!--  Profile</a>-->\n\n<!--<a routerLink=\"/course\">-->\n<!--  Courses</a>-->\n\n<div class=\"login-wrapper\">\n  <form class=\"login\" (ngSubmit)=\"onSubmit(signInForm)\" #signInForm =\"ngForm\">\n    <section class=\"title\">\n      <h3 class=\"welcome\">Welcome to</h3>\n      <clr-icon size=\"26\" shape=\"dna\"></clr-icon>\n      Medical Info\n<!--      <h5 class=\"hint\">Use your Company ID to sign in or create one now</h5>-->\n    </section>\n    <div class=\"login-group\">\n\n      <clr-input-container>\n        <label class=\"clr-sr-only\">Username</label>\n        <input type=\"text\" id=\"inputUsername\" name=\"username\" clrInput placeholder=\"Username\" required autofocus ngModel/>\n      </clr-input-container>\n\n      <clr-password-container>\n        <label class=\"clr-sr-only\">Password</label>\n        <input type=\"password\" id=\"inputPassword\" name=\"password\" clrPassword placeholder=\"Password\" required ngModel/>\n      </clr-password-container>\n\n      <clr-checkbox-wrapper>\n        <label>Remember me</label>\n        <input type=\"checkbox\" name=\"rememberMe\" clrCheckbox />\n      </clr-checkbox-wrapper>\n\n<!--      <div class=\"error {{errorActive}}\" >-->\n<!--        {{errorMessage}}-->\n<!--      </div>-->\n      <div class=\"error {{errorActive}} \" *ngIf=\"isFormInvalid\">\n        Please fill in the requirements\n      </div>\n      <div class=\"error {{errorActive}}\" *ngIf=\"areCredentialsInvalid\" >\n        Username or Password Incorrect\n      </div>\n\n      <button class=\"btn btn-primary\" type=\"submit\">Login</button>\n<!--      (click)=\"login(username, password)\"-->\n      <a href=\"javascript://\" class=\"signup\" routerLink =\"/register\">No Account, No problem Click Here</a>\n\n      <a href=\"javascript://\" class=\"signup\" routerLink =\"/forgotpassword\">Forgot Password? Click Here</a>\n\n\n\n    </div>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {CourseService} from '../services/CourseService';\nimport {AuthenticationService} from '../services/authentication/authentication.service';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.css']\n})\nexport class MainComponent implements OnInit {\n  private routerLink: any;\n\n\n  constructor(private courseService: CourseService, public authenticationService: AuthenticationService) { }\n\n  // patients: [];\n  // selectedPatient = {\n  //   // modules: []\n  // };\n\n  patients: [];\n  selectedPatient = {\n    modules: []\n  };\n\n  ngOnInit(): void {\n    this.courseService.findAllPatients().then(patients => this.patients = patients);\n  }\n\n  // tslint:disable-next-line:typedef\n  selectPatient(patient: never) {\n    this.selectedPatient = patient;\n\n  }\n\n  logout(){\n    this.authenticationService.logout();\n  }\n\n}\n","<div class=\"main-container\">\n  <header class=\"header header-6\">\n    <div class=\"branding\">\n      <a class=\"nav-link\">\n        <clr-icon size=\"30\" shape=\"dna\"></clr-icon>\n        <span class=\"title\">Medical Info</span>\n      </a>\n    </div>\n\n    <div class=\"header-actions\">\n      <clr-dropdown>\n        <clr-icon shape=\"user\"></clr-icon>\n        <button class=\"nav-icon\" clrDropdownTrigger>\n        </button>\n        <clr-dropdown-menu *clrIfOpen clrPosition=\"bottom-right\">\n\n          <a href=\"javascript:void(0);\" (click)=\"logout()\" clrDropdownItem>Logout</a>\n\n<!--          <a href=\"javascript:void(0);\" (click)=\"logout()\" clrDropdownItem>Log out</a>-->\n        </clr-dropdown-menu>\n      </clr-dropdown>    <!--adding it here -->\n    </div>\n\n  </header>\n\n  <div class=\"content-container\">\n    <div class=\"content-area\">\n\n      <div class=\"clr-row\">\n\n        <div class=\"clr-col\">\n\n          <div *ngFor=\"let patient of patients\" class=\"card\">\n\n            <ul class=\"list-group\">\n\n              <li class=\"list-group-item\">\n                Patient Name: {{patient.name}}\n              </li>\n                <li class=\"list-group-item\">\n                    Patient Name: {{patient.gender}}\n                </li>\n                <li class=\"list-group-item\">\n                    Patient Name: {{patient.age}}\n                </li>\n                <li class=\"list-group-item\">\n                    Patient Name: {{patient.height}}\n                </li>\n                <li class=\"list-group-item\">\n                    Patient Name: {{patient.weight}}\n                </li>\n                <li class=\"list-group-item\">\n                    Patient Name: {{patient.allergy}}\n                </li>\n                <li class=\"list-group-item\">\n                    Patient Name: {{patient.cond}}\n                </li>\n                <li class=\"list-group-item\">\n                    <clr-accordion>\n                        <clr-accordion-panel>\n                            <clr-accordion-title>Details</clr-accordion-title>\n                            <clr-accordion-content *clrIfExpanded>\n                                <!--                    <p>Details about patient that cannot be categorized....</p>-->\n\n                                <form class=\"clr-form\">\n                                    <div class=\"clr-form-control\">\n                                        <label for=\"vertical-textarea-basic\" class=\"clr-control-label\">Patient details</label>\n                                        <div class=\"clr-control-container\">\n                                            <div class=\"clr-textarea-wrapper\">\n                            <textarea rows=\"10\" cols=\"100\" id=\"vertical-textarea-basic\" placeholder=\"Details about patient that cannot be categorized.... \" class=\"clr-textarea\">\n\n                            {{patient.details}}\n\n                            </textarea>\n                                                <clr-icon class=\"clr-validate-icon\" shape=\"exclamation-circle\"></clr-icon>\n                                            </div>\n                                            <span class=\"clr-subtext\">Helper Text</span>\n                                        </div>\n                                    </div>\n                                </form>\n\n                            </clr-accordion-content>\n                        </clr-accordion-panel>\n\n                    </clr-accordion>\n                </li>\n            </ul>\n\n            <button class=\"btn btn-warning\">Delete</button>\n            <button class=\"btn btn-primary\">Edit</button>\n            <button class=\"btn btn-success\">Save</button>\n<!--            </div>-->\n          </div>\n\n        </div>\n<!--        <div class=\"clr-col\">-->\n<!--          <span>1/5</span>-->\n<!-- TOD0 if we need more add it like the div above-->\n      </div>\n    </div>\n    <button class=\"btn btn-success\">Add Card</button>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport {CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {AuthenticationService} from '../services/authentication/authentication.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationGuard implements CanActivate {\n\n  constructor(private authenticationService: AuthenticationService, private router: Router) {\n  }\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if (this.authenticationService.isAuthenticated){\n      return true;\n    }\n    this.router.navigate([' ']);\n    return false;\n  }\n\n}\n\n\n\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}